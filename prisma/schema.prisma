// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int @id @default(autoincrement())
  firstName String @db.VarChar(30) 
  lastName  String @db.VarChar(30) 
  email     String @unique
  password  String @db.Char(60)
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  social_media Json
  articles  Article[]
  role      Role @relation(fields: [roleId], references: [id])
}
model Article {
  id        Int @id @default(autoincrement())
  title     String @db.VarChar(30)
  subHead   String @db.VarChar(30)
  contents  String @db.Text
  text      String @db.Text
  image     String @db.VarChar(255)
  background String @db.VarChar(255)
  comments  String @db.Text
  authorId  Int
  category_id Int
  map       String @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  author    User @relation(fields: [authorId], references: [id])
  Category Category @relation(fields: [category_id], references: [id])
}
model Role {
  id        Int @id @default(autoincrement())
  textRole  String @db.VarChar(30)
  users     User[]
}
model Category {
  id        Int @id @default(autoincrement())
  name      String @db.VarChar(150)
  Article  Article[]
}

// model CategoriesOnArticles {
//   article    Article @relation(fields: [articleId], references: [id])
//   articleId  Int // relation scalar field (used in the `@relation` attribute above)
//   category   Category @relation(fields: [categoryId], references: [id])
//   categoryId Int // relation scalar field (used in the `@relation` attribute above)
//   assignedAt DateTime @default(now())
//   assignedBy String

//   @@id([articleId, categoryId])
// }